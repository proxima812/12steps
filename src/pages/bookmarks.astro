---
import PostCard from "@/components/PostCard.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";

import { getSinglePage } from "@/utils/libs/getSinglePage";
import { getCollection } from "astro:content";

import type { IBookmark } from "@/types/global";

// const posts = await getSinglePage("posts");

const bookmarks = (Astro.cookies.get("bookmarks")?.json() || []) as IBookmark[];
const posts =
  (await getCollection(
    "posts",
    (item) => item && bookmarks.some((bookmark) => bookmark.id === item.id),
  )) || [];

  export const prerender = false;
---

<BaseLayout title="" description=""  
blurClass={{
    topLeft: "bg-green-300/70",
    topRight: "bg-emerald-300/70",
    bottomRight: "bg-black",
    bottomLeft: "bg-black",
  }}
  >
{
  posts && posts.length > 0 ? (
    <>
      <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {posts.map((item) => {
          const isChecked = bookmarks.some((bookmark) => bookmark.id === item.id);
          return (
            <PostCard
              isChecked={isChecked}
              item={item}
              slug={item.slug}
              data={item.data}
            />
          );
        })}
      </div>
    </>
  ) : (
    <div class="flex justify-center items-center flex-col gap-6">
      <h2 class="text-2xl">
        –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. ü§´ 
        </h2>
         <h2 class="text-2xl"><b><u>–ò–ª–∏ –∂–µ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É! üôè</u></b></h2>
    </div>
  )
}

  <script>

import type { IBookmark } from "@/types/global"
import { getCookie, setCookie } from "@/utils/cookie"
 

    import { navigate } from "astro:transitions/client"

    document.addEventListener("DOMContentLoaded", () => {
      const url = new URL(window.location.href);
      const hasBookmarkPage = url.pathname.includes("favorite");
      const bookmarkButtons = document.querySelectorAll("[data-bookmark]");

      function parseBookmarks(bookmarks: string) {
        return JSON.parse(bookmarks) as IBookmark[];
      }

      function stringifyBookmarks(bookmarks: IBookmark[]) {
        return JSON.stringify(bookmarks);
      }

      Array.from(bookmarkButtons).forEach((button) =>
        button.addEventListener("click", (e) => {
          const targetElement = e.currentTarget as HTMLButtonElement;
          const id = targetElement.dataset.value as string;

          let bookmarks = getCookie("bookmarks") || "[]";

          const parsedBookmarks = parseBookmarks(bookmarks);
          const bookmarkExists = parsedBookmarks.find((item) => item.id === id);

          const bookmark = {
            id,
            date: new Date().toUTCString(),
          };

          targetElement.dataset.checked = bookmarkExists ? "false" : "true";

          const updatedBookmarks = bookmarkExists
            ? parsedBookmarks.filter((item) => item.id !== id)
            : [...parsedBookmarks, bookmark];

          setCookie("bookmarks", stringifyBookmarks(updatedBookmarks));

          if (hasBookmarkPage && bookmarkExists) {
            navigate("/favorite");
          }
        }),
      );
    });
  </script>
</BaseLayout>
