---
import Breadcrumbs from "@/components/Customs/Breadcrumbs.astro"
import FormattedDate from "@/components/Customs/FormattedDate.astro"
import RelatedPosts from "@/components/RelatedPosts.astro"
import Tag from '@/components/Tag.astro'
import Code from "@/components/mdx/Code.astro"
import { getCollection } from "astro:content"
import BaseLayout from "src/layouts/BaseLayout.astro"

const posts = await getCollection("posts");

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props;

// Похожие посты по тегам
const getRelatedPosts = (post: any) => {
  const relatedPosts = posts.filter(
    (p) =>
      p.slug !== post.slug &&
      p.data.tags.some((t) => post.data.tags.includes(t)),
  );
  return relatedPosts.slice(0, 3);
};

// Похожие посты по тегам - вывести relatedPosts
const relatedPosts = getRelatedPosts(post);
const { Content, headings } = await post.render();

const ogUrl = new URL(`/posts/${post.slug}.png`, Astro.url.origin).href;

const customCrumbs = [
  {
    text: 'Посты',
    href: "/posts",
    title: "Part of the breadcrumb list",
  },
  {
    text: post.data.title,
    href: "#",
  },
]; 
---


<BaseLayout
  title={post.data.title}
  description={post.data.description}
  tags={post.data.tags}
  heroImage={ogUrl}
  type
  container_max_w="max-w-4xl"
>
  <Breadcrumbs crumbs={customCrumbs}>
    <svg
      slot="separator"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      ><polyline points="9 18 15 12 9 6"></polyline>
    </svg>
  </Breadcrumbs>
  <article class="flex flex-col gap-12">
    <div class="flex flex-col gap-6">
      <h1 class="text-4xl font-bold lg:text-6xl">
        {post.data.title}
      </h1>
      <div class="flex flex-col gap-3">
        <p class="text-sm text-zinc-300 md:text-lg">
          {post.data.description}
        </p>
        <div class="flex flex-wrap items-center justify-between gap-3">
          <div class="z-[2] flex gap-3" aria-label="Теги поста">
            {
              post.data.tags &&
                post.data.tags.map((tag) => (
                  <Tag tag={tag} />
                ))
            }
          </div>
          <FormattedDate date={post.data.pubDate} />
        </div>
      </div>
    </div>

    {
      post.data.speechVoice && (
        <audio controls class="w-full">
          <source
            src={post.data.audioFile.replace("public/", "")}
            type="audio/mpeg"
          />
        </audio>
      )
    }

    <div
      aria-label="Контент поста"
      class="md:prose-md prose prose-slate prose-invert max-w-none font-light lg:prose-lg prose-headings:max-w-[280px] prose-a:text-blue-500 sm:prose-headings:max-w-full  prose-li:marker:text-yellow-300 prose-blockquote:text-blue-300 prose-blockquote:border-blue-100"
    >
      <Content components={{ pre: Code }} />
    </div>
    {relatedPosts.length > 0 && <RelatedPosts posts={relatedPosts} />}
  </article>
  


<!-- Стилизуй и пойми, нужно ли TOC -->
  <!-- {headings && headings.length > 0 && <TableOfContents {headings} />} -->
</BaseLayout>
