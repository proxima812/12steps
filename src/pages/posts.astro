---
export const prerender = false;

import PostCard from "@/components/PostCard.astro";
import Search from "@/components/Search";
import TagsNav from "@/components/TagsNav.astro";
import { DEFAULT_TITLE } from "@/config/settings";
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { IBookmark } from "@/types/global";
import { getSinglePage } from "@/utils/libs/getSinglePage";
import { getCollection } from "astro:content";

const posts = await getSinglePage("posts");

const bookmarks = (Astro.cookies.get("bookmarks")?.json() || []) as IBookmark[];
---

<BaseLayout
  title="Посты на тему 12 шагов"
  description={`${DEFAULT_TITLE}. Более (${posts.length}) постов: 12 шагов, материалы, опыт, разработка и другое.`}
  container_max_w="max-w-6xl"
>
  <TagsNav />
  
  <Search
    client:visible
    classNameMainDiv="max-w-full"
    classNameIcon="ring-1 ring-inset bg-zinc-800 ring-white/20"
    classNameSearch="ring-1 ring-inset ring-white/20"
    postsList={posts}
  />
  <div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
   {
      posts.map(async (item: any) => {
        const isChecked = bookmarks.some((bookmark) => bookmark.id === item.id);
        return (
          <PostCard
            isChecked={isChecked}
            item={item.id}
            slug={item.slug}
            data={item.data}
          />
        );
      })
    }
  </div>
  <script>
    import type { IBookmark } from "@/types/global";
import type { IBookmark } from "@/types/global"
import { getCookie, setCookie } from "@/utils/cookie"
import { navigate } from "astro:transitions/client"

    document.addEventListener("DOMContentLoaded", () => {
      const url = new URL(window.location.href);
      const hasBookmarkPage = url.pathname.includes("bookmarks");
      const bookmarkButtons = document.querySelectorAll("[data-bookmark]");

      function parseBookmarks(bookmarks: string) {
        return JSON.parse(bookmarks) as IBookmark[];
      }

      function stringifyBookmarks(bookmarks: IBookmark[]) {
        return JSON.stringify(bookmarks);
      }

      Array.from(bookmarkButtons).forEach((button) =>
        button.addEventListener("click", (e) => {
          const targetElement = e.currentTarget as HTMLButtonElement;
          const id = targetElement.dataset.value as string;

          let bookmarks = getCookie("bookmarks") || "[]";

          const parsedBookmarks = parseBookmarks(bookmarks);
          const bookmarkExists = parsedBookmarks.find((item) => item.id === id);

          const bookmark = {
            id,
            date: new Date().toUTCString(),
          };

          targetElement.dataset.checked = bookmarkExists ? "false" : "true";

          const updatedBookmarks = bookmarkExists
            ? parsedBookmarks.filter((item) => item.id !== id)
            : [...parsedBookmarks, bookmark];

          setCookie("bookmarks", stringifyBookmarks(updatedBookmarks));

          if (hasBookmarkPage && bookmarkExists) {
            navigate("/bookmarks");
          }
        }),
      );
    });
  </script>
</BaseLayout>
